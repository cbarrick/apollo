import argparse
import logging
import pkgutil
from pathlib import Path


def setup_logging(args):
    '''Setup the logging for the app.

    We use module-level loggers everywhere. Most of them are already
    initialized before we get to configure them. So we must reset the
    default log handlers that have already been created.
    '''
    if args.quiet:
        level = 'WARN'
    elif args.debug:
        level = 'DEBUG'
    else:
        level = args.log

    # Configure the root logger.
    log_format = logging.Formatter('[%(asctime)s] %(levelname)s: %(message)s')
    log_handler = logging.StreamHandler()
    log_handler.setFormatter(log_format)
    root_logger = logging.getLogger('')
    root_logger.handlers = [log_handler]  # Replace the existing log handlers.

    # Only set the level for loggers under the `apollo` namespace.
    apollo_logger = logging.getLogger('apollo')
    apollo_logger.setLevel(level)


def iter_subcommands():
    '''Iterate over the available subcommands.
    '''
    path = Path(__file__).parent
    for modinfo in pkgutil.iter_modules([path]):
        name = modinfo.name
        if not name.startswith('_'):
            yield name


def call_subcommand(name, argv):
    '''Call the subcommand with the given name.
    '''
    prefix = __loader__.name
    fullname = f'{prefix}.{name}'
    loader = pkgutil.get_loader(fullname)
    mod = loader.load_module()
    mod.main(argv)


def description():
    '''Returns the description text.
    '''
    desc = 'The Apollo irradiance forecast system.\n\n'
    desc += 'subcommands:\n'
    for cmd in iter_subcommands():
        desc += f'  {cmd}\n'
    return desc


def main(argv):
    parser = argparse.ArgumentParser(
        description=description(),
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )

    log_options = parser.add_mutually_exclusive_group()

    log_options.add_argument(
        '--quiet',
        action='store_true',
        help='Only log error and warning messages (i.e. --log=WARN)'
    )

    log_options.add_argument(
        '--debug',
        action='store_true',
        help='Log debug messages (i.e. --log=DEBUG)'
    )

    log_options.add_argument(
        '--log',
        metavar='LEVEL',
        type=str,
        default='INFO',
        help='Set the log level (default: INFO)'
    )

    parser.add_argument(
        'command',
        metavar='COMMAND',
        choices=list(iter_subcommands()),
        help='The subcommand to execute',
    )

    parser.add_argument(
        'argv',
        metavar='...',  # Matches the usage string generated by argparse.
        nargs=argparse.REMAINDER,
        help='Additional arguments are forwarded to the subcommand'
    )

    args = parser.parse_args(argv)

    setup_logging(args)
    call_subcommand(args.command, args.argv)
