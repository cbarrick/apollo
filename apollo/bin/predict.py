import argparse
import logging

from apollo import models, timestamps
from apollo.models.base import list_trained_models
from apollo.models.base import load as load_model
from apollo.output import write_csv, write_json


def main(argv=None):
    parser = argparse.ArgumentParser(
        description='Generate a prediction from a trained Apollo model.',
    )

    parser.add_argument(
        'model',
        metavar='MODEL',
        type=str,
        help='the name of the model',
    )

    outputs = parser.add_mutually_exclusive_group()

    outputs.add_argument(
        '-j',
        '--json',
        action='store_true',
        help='write predictions as JSON (default)',
    )

    outputs.add_argument(
        '-c',
        '--csv',
        action='store_true',
        help='write predictions as CSV',
    )

    selectors = parser.add_mutually_exclusive_group()

    selectors.add_argument(
        '-t',
        '--reftime',
        metavar='TIMESTAMP',
        default='now',
        help='make a prediction for the given reftime',
    )

    # TODO: Add more selectors to be consistent with other Apollo CLIs.
    # This requires our models to be more Scikit-learn compatible (#65).
    # With multiple selectors, we can't set a default for argparse.

    args = parser.parse_args(argv)

    reftime = timestamps.utc_timestamp(args.reftime).floor('6h')

    logging.info('Loading model...')
    model_name = args.model
    model = load_model(model_name)

    logging.info('Generating predictions...')
    forecast = model.forecast(reftime)

    formatted_reftime = reftime.strftime('%Y_%m_%d-%H:%M')
    first_hour, last_hour = model.target_hours[0], model.target_hours[-1]
    description = f'Predicted irradiance for {model.target} ' \
                  f'for future hours {first_hour} through {last_hour}. ' \
                  f'Prediction generated by a {model.__class__.__name__} model.'

    logging.info('Writing predictions to disk...')
    if args.csv:
        output_file = write_csv(
            forecast=forecast,
            name=f'{model_name}-{formatted_reftime}',
        )
    elif args.json:
        output_file = write_json(
            forecast=forecast,
            reftime=reftime,
            source=model_name,
            name=f'{model_name}-{formatted_reftime}',
            description=description,
        )
    else:
        output_file = write_json(
            forecast=forecast,
            reftime=reftime,
            source=model_name,
            name=f'{model_name}-{formatted_reftime}',
            description=description,
        )

    logging.info(f'Wrote {output_file}')


if __name__ == '__main__':
    main()
